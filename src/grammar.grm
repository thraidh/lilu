grammar lilu;

lilufile ::= ^ element* $;
element ::= funcdef | expr ;
extern expr;
args ::= [ arg [ "," arg ]* ]?;
arg ::= name=ID ":" type=ID;
funcdef ::= "function" name=ID "(" args ")" ":" rtype=ID "is" body=element "end";
fragment parenthesized ::= "(" expr ")";
primary ::= ID | NUMBER | parenthesized ;






grammar grammar;

top ::= ^ "grammar" ID ";" rule* $;
rule ::= ID ":x:=" alt ";" ;
rule ::= extern="extern" ID ";" ;
alt ::= "|"? seq [ "|" seq ]*;
seq ::= rep *;
rep ::= named op=[ "*" | "+" | "?" ]?;
named ::= [ name=ID "=" ]? element ;
element ::= special | ref | capture | noncapture | text ;
special ::= "^" | "$" ;
ref ::= ID;
capture ::= "(" alt ")";
noncapture ::= "[" alt "]";
text ::= STRING;

void visit_top() { std::cout << "visit_top" << std::endl; }
void visit_rule() { std::cout << "visit_rule" << std::endl; }
void visit_rule() { std::cout << "visit_rule" << std::endl; }
void visit_alt() { std::cout << "visit_alt" << std::endl; }
void visit_seq() { std::cout << "visit_seq" << std::endl; }
void visit_rep() { std::cout << "visit_rep" << std::endl; }
void visit_named() { std::cout << "visit_named" << std::endl; }
void visit_element() { std::cout << "visit_element" << std::endl; }
void visit_special() { std::cout << "visit_special" << std::endl; }
void visit_ref() { std::cout << "visit_ref" << std::endl; }
void visit_capture() { std::cout << "visit_capture" << std::endl; }
void visit_noncapture() { std::cout << "visit_noncapture" << std::endl; }
void visit_text() { std::cout << "visit_text" << std::endl; }

    void visit_primary()
    {
        std::cout << "visit_primary" << std::endl;
    };


class visitor
{
  public:
    virtual void visit_lilufile() = 0;
    virtual void visit_element() = 0;
    virtual void visit_funcdef() = 0;
    virtual void visit_expr() = 0;
    virtual void visit_args() = 0;
    virtual void visit_arg() = 0;
    virtual void visit_primary() = 0;
    virtual ~visitor() {}

virtual void visit_top()=0;
virtual void visit_rule()=0;
virtual void visit_rule()=0;
virtual void visit_alt()=0;
virtual void visit_seq()=0;
virtual void visit_rep()=0;
virtual void visit_named()=0;
virtual void visit_element()=0;
virtual void visit_special()=0;
virtual void visit_ref()=0;
virtual void visit_capture()=0;
virtual void visit_noncapture()=0;
virtual void visit_text()=0;

};


RULE(top);
RULE(rule);
RULE(rule);
RULE(alt);
RULE(seq);
RULE(repe);
RULE(named);
RULE(element);
RULE(special);
RULE(ref);
RULE(capture);
RULE(noncapture);
RULE(text);

top=text("grammar")+id()+text(";")+rep(rule);
rule=id()+text(":x:=")+alt+text(";");
rule=text("extern")/"extern"+id()+text(";");
alt=opt(text("|"))+seq+rep(text("|")+seq);
seq=rep(repe);
repe=named+opt((text("*")|text("+")|text("?"))/"op");
named=opt(id()/"name"+text("="))+element;
element=special|ref|capture|noncapture|text;
special=text("^")|text("$");
ref=id();
capture=text("(")+alt+text(")");
noncapture=text("(")+alt+text(")");
text=string();


    lilufile = rep(element);
    element = funcdef | expr;
    expr = expa;
    args = opt(arg + rep("," + arg));
    arg = id() / "name" + text(":") + id() / "type";
    funcdef = "function" + id() / "name" + "(" + args + ")" + ":" + id() / "rtype" + "is" + element / "body" + "end";
    auto parenthesized = "(" + expr + ")";
    primary = id() | number() | parenthesized;
